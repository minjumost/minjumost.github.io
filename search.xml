<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[BOJ] 1010번: 다리놓기 (Java)</title>
    <url>//source/_posts/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p><a class="link" href="https://arc.net/l/quote/cwvedvyg">문제 바로가기 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>재원이는 한 도시의 시장이 되었다. 이 도시에는 도시를 동쪽과 서쪽으로 나누는 큰 일직선 모양의 강이 흐르고 있다. 하지만 재원이는 다리가 없어서 시민들이 강을 건너는데 큰 불편을 겪고 있음을 알고 다리를 짓기로 결심하였다. 강 주변에서 다리를 짓기에 적합한 곳을 사이트라고 한다. 재원이는 강 주변을 면밀히 조사해 본 결과 강의 서쪽에는 N개의 사이트가 있고 동쪽에는 M개의 사이트가 있다는 것을 알았다. (N ≤ M)</p>
<p>재원이는 서쪽의 사이트와 동쪽의 사이트를 다리로 연결하려고 한다. (이때 한 사이트에는 최대 한 개의 다리만 연결될 수 있다.) 재원이는 다리를 최대한 많이 지으려고 하기 때문에 서쪽의 사이트 개수만큼 (N개) 다리를 지으려고 한다. 다리끼리는 서로 겹쳐질 수 없다고 할 때 다리를 지을 수 있는 경우의 수를 구하는 프로그램을 작성하라.</p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/%EB%AC%B8%EC%A0%9C%EC%84%A4%EB%AA%85.png" alt="문제설명"><figcaption>문제설명</figcaption></figure></p>
<h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><p>우측 사이트(M)에서 좌측(N) 사이트의 수 만큼 선택하는 문제이다.</p>
<p>문제에서 주어진 조건은 다음과 같다.</p>
<blockquote>
<ol>
<li><p>한 사이트당 하나의 다리만 연결할 수 있다.</p>
<p><code>중복이 없다.</code></p>
</li>
<li><p>다리끼리는 겹칠 수 없다.</p>
<p><code>순서가 없다.</code></p>
</li>
</ol>
</blockquote>
<p>따라서 순서를 고려하지않고, 중복이 없는 조합으로 문제를 풀 수 있다.</p>
<p>하지만 조합은 매우 간단하게 구현이 가능하므로 여기서는 생략하고 DP를 이용한 풀이를 보겠다.</p>
<h3 id="DP를-이용한-풀이"><a href="#DP를-이용한-풀이" class="headerlink" title="DP를 이용한 풀이"></a>DP를 이용한 풀이</h3><blockquote>
<p>규칙을 먼저 찾아보자.</p>
</blockquote>
<p>row를 source의 수, column을 destination의 수로 하는 행렬을 만들고, 각각의 경우를 직접 그려보면서 하나씩 값을 채워 보았다.</p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/pattern1.PNG" alt="pattern1"><figcaption>pattern1</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/pattern2.PNG" alt="pattern2"><figcaption>pattern2</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/pattern3.PNG" alt="pattern3"><figcaption>pattern3</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/pattern4.PNG" alt="pattern4"><figcaption>pattern4</figcaption></figure></p>
<p>결과적으로 아래와 같은 패턴을 찾을 수 있었다.</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="54.143ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 23931.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(1312,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1701,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2152,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2637,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(3353,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3797.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(4230.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4715.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(5013.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5680.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(6736.2,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(7221.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7750.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(8048.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8437.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8888.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9373.2,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(10311.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(11311.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11811.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12256.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(12689.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(13174.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(13694.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(14694.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15194.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(15806,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(16806.2,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(17291.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(17820.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(18118.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(18507.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18958.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(19443.2,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(20159.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(20603.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(21036.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(21521.9,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(22042.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(23042.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(23542.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<br>

<blockquote>
<p>왜 이런 규칙이 생길까?</p>
</blockquote>
<p>좀 더 resonable하게 DP를 사용하기 위해서 3개의 source와 5개의 destination이 있다고 가정하자.</p>
<p>그렇다면 다음 두 가지의 경우로 나누어서 생각해볼 수 있을 것이다.</p>
<h6 id="1-마지막-3번째-source가-마지막-5번째-destination과-연결된-경우"><a href="#1-마지막-3번째-source가-마지막-5번째-destination과-연결된-경우" class="headerlink" title="1. 마지막(3번째) source가 마지막(5번째) destination과 연결된 경우"></a>1. 마지막(3번째) source가 마지막(5번째) destination과 연결된 경우</h6><p>이 경우에는 2개의 source와 4개의 destination을 연결하는 경우와 같다.</p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/dp1.png" alt="dp1"><figcaption>dp1</figcaption></figure></p>
<h6 id="2-마지막-3번째-source가-마지막-5번째-destination에-연결되지-않은-경우"><a href="#2-마지막-3번째-source가-마지막-5번째-destination에-연결되지-않은-경우" class="headerlink" title="2. 마지막(3번째) source가 마지막(5번째) destination에 연결되지 않은 경우"></a>2. 마지막(3번째) source가 마지막(5번째) destination에 연결되지 않은 경우</h6><p>이 경우에는 3번째 source가 4번째, 5번째에 연결될 수 있어서 각각의 경우를 구해야한다.</p>
<p>하지만 우리는 이전에 구한 값을 사용하기만 하면된다. (bottom-up 방식)</p>
<p>따라서 이전에 구했던 최적해인 val(row, col-1) 의 값을 사용하기만 하면 된다.</p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/BOJ-1010%EB%B2%88-%EB%8B%A4%EB%A6%AC%EB%86%93%EA%B8%B0-Java/dp2.png" alt="dp2"><figcaption>dp2</figcaption></figure></p>
<p>이 두가지 케이스의 경우를 모두 더함으로써 모든 경우의 수를 구할 수 있게 됐고, 아래 점화식이 나오게 된다.</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.103ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 16399.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1023,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1301,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1646,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(1924,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(2202,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2614,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(3169.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4225.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4745.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5248.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(5526.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6093.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7094,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7594,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(7872,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(8150,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(8784.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(9784.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10284.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(10784.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11784.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(12304.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(12807.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(13085.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(13430.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(13708.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(13986.9,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(14621.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(15621.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16121.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<h4 id="전체-코드"><a href="#전체-코드" class="headerlink" title="전체 코드"></a>전체 코드</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BOJ_1010</span> {</span><br><span class="line">	<span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">	<span class="keyword">static</span> StringTokenizer stringTokenizer;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> M;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span>[][] dp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">		<span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> Integer.parseInt(bufferedReader.readLine());</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">1</span>; t&lt;=T ; t++){</span><br><span class="line">			System.out.println(solution());</span><br><span class="line"></span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solution</span><span class="params">()</span> <span class="keyword">throws</span> IOException{</span><br><span class="line">		stringTokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(bufferedReader.readLine());</span><br><span class="line">		N = Integer.parseInt(stringTokenizer.nextToken());</span><br><span class="line">		M = Integer.parseInt(stringTokenizer.nextToken());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 일관된 코드를 위해 0번쨰줄 초기화 (r, c = 0)</span></span><br><span class="line">		dp = <span class="keyword">new</span> <span class="title class_">int</span>[N+<span class="number">1</span>][M+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 첫줄 채우기 (r = 1, c = 1~M)</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=M; i++){</span><br><span class="line">			dp[<span class="number">1</span>][i] = i;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 두번째 줄부터 채우기 (r = 2~N, c = r~M)</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;= N; i++){</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=i; j&lt;=M; j++){</span><br><span class="line">				dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> dp[N][M];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>알고리즘</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>조합</tag>
      </tags>
  </entry>
  <entry>
    <title>[Object] 2장: 객체지향 프로그래밍</title>
    <url>//source/_posts/Object-2%EC%9E%A5-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</url>
    <content><![CDATA[<h2 id="협력-객체-클래스"><a href="#협력-객체-클래스" class="headerlink" title="협력, 객체, 클래스"></a>협력, 객체, 클래스</h2><p>우리는 보통 프로그래밍을 할 때 가장 먼저 어떤 <code>클래스</code>가 필요한지 고민한다. 그리고 클래스에 어떤 <code>속성</code>과 <code>메서드</code>가 필요한지 고민한다.<br>하지만 진정한 객체지향 패러다임으로의 전환은 클래스가 아닌 <strong>객체</strong>에 초점을 맞출 때에만 얻을 수 있다.<br>따라서 우리는 프로그래밍을 하는 동안 두 가지에 집중해야한다.</p>
<p><em>1. 클래스가 아니라 어떤 객체들이 필요한지 고민하라.</em><br>클래스는 공통적인 상태와 행동을 공유하는 객체들을 추상화한 것이다. 따라서 클래스의 윤곽을 잡기 위해서는 어떤 객체들이 어떤 상태와 행동을 가지는지를 먼저 결정해야 한다. 객체를 중심에 두는 접근 방법은 설계를 단순하고 깔끔하게 만든다.</p>
<p><em>2. 객체를 독립적인 존재가 아닌 기능을 구현하기 위해 협력하는 공동체의 일원으로 봐야한다.</em><br>훌륭한 협력이 훌륭한 객체를 낳고 훌륭한 객체가 훌륭한 클래스를 낳는다.</p>
<h2 id="도메인의-구조를-따르는-프로그램-구조"><a href="#도메인의-구조를-따르는-프로그램-구조" class="headerlink" title="도메인의 구조를 따르는 프로그램 구조"></a>도메인의 구조를 따르는 프로그램 구조</h2><p>문제를 해결하기 위해 사용자가 프로그램을 사용하는 분야를 <code>도메인</code>이라고 한다.</p>
<p>객체지향 패러다임이 강력한 이유는 요구사항과 프로그램을 객체라는 동일한 관점에서 바라볼 수 있기 때문이다.<br>따라서 도메인을 구성하는 개념들이 프로그램의 객체와 클래스로 매끄럽게 연결될 수 있다.<br>일반적으로 클래스의 이름은 대응되는 도메인 개념의 이름과 동일하거나 적어도 유사하게 지어야 한다.</p>
<p><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/domain.png" alt="도메인을 구성하는 타입들의 구조"><figcaption>도메인을 구성하는 타입들의 구조</figcaption></figure><figure class="image-caption"><img lazyload="" src="/images/loading.svg" data-src="/../images/class.png" alt="도메인 개념의 구조를 따르는 클래스 구조"><figcaption>도메인 개념의 구조를 따르는 클래스 구조</figcaption></figure></p>
<h2 id="클래스-구현하기"><a href="#클래스-구현하기" class="headerlink" title="클래스 구현하기"></a>클래스 구현하기</h2><p>상영 도메인을 구현하는 Screening클래스를 구현해보자.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Screening</span>{</span><br><span class="line">	<span class="comment">// 상영하는 영화</span></span><br><span class="line">	<span class="keyword">private</span> Movie movie;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 하루에 몇번째로 상영하는지?</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> sequence;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 상영 시간</span></span><br><span class="line">	<span class="keyword">private</span> LocalDateTime whenScreened;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Screening</span><span class="params">(Movie movie, <span class="type">int</span> sequence, LocalDateTime whenScreened)</span>{</span><br><span class="line">		<span class="built_in">this</span>.movie = movie;</span><br><span class="line">		<span class="built_in">this</span>.sequence = sequence;</span><br><span class="line">		<span class="built_in">this</span>.whenScreened = whenScreened;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> LocalDateTime <span class="title function_">getStartTime</span><span class="params">()</span>{</span><br><span class="line">		<span class="keyword">return</span> whenScreened;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSequence</span><span class="params">(<span class="type">int</span> sequence)</span>{</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.sequence == sequence;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Money <span class="title function_">getMovieFee</span><span class="params">()</span>{</span><br><span class="line">		<span class="keyword">return</span> movie.getFee();</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>위 코드를 보면 인스턴스 변수의 가시성은 <code>private</code>이고 ,메서드의 가시성은 <code>public</code>이다.<br>외부에서는 객체의 속성에 직접 접근할 수 없도록 막고, 적절한 public 메서드를 통해서만 내부 상태를 변경할 수 있게 해야 한다.<br>이와 같이 클래스의 내부와 외부를 구분해야 하는 이유는 경계의 명확성이</p>
<ul>
<li><code>객체의 자율성</code>을 보장하고,</li>
<li><code>프로그래머에게 구현의 자유</code>를 제공하기 때문이다.</li>
</ul>
<h4 id="자율적인-객체"><a href="#자율적인-객체" class="headerlink" title="자율적인 객체"></a>자율적인 객체</h4><p>객체 내부에 대한 접근을 통제하는 이유는 객체를 자율적인 존재로 만들기 위해서다. 객체가 자율적인 존재로 우뚝 서기 위해서는 외부의 간섭을 최소화해야 한다. 외부에서 객체에게 원하는 것을 요청하면, 객체가 스스로 최선의 방법을 결정할 수 있을 것이라는 점을 믿고 기다려야 한다.</p>
<p>데이터와 기능을 객체 내부로 함께 묶는 것을 <code>캡슐화</code>라고 한다.<br>그리고 캡슐화에서 한걸음 더 나아가 외부에서의 접근을 통제할 수 있게 하는 것이 <code>접근 제어</code>이다.<br>이를 통해 객체를 두 부분으로 나눌 수 있다.</p>
<ul>
<li>외부에서 접근 가능한 퍼블릭 인터페이스(interface)</li>
<li>내부에서만 접근 가능한 구현(implementation)</li>
</ul>
<p>이것들은 객체지향 프로그래밍의 핵심 원칙인 인터페이스와 구현의 분리에서 중요한 역할을 한다.<br>프로그래밍 언어가 public이나 private 키워드를 제공한다면 클래스의 속성은 private로 선언해서 감추고 외부에 제공해야 하는 일부 메서드만 public으로 선언해야 한다.<br>이때 퍼블릭 인터페이스에는 public으로 지정된 메서드만 포함된다. 그 밖의 private, protected 메서드, 속성은 구현에 포함된다.</p>
<h4 id="프로그래머의-자유"><a href="#프로그래머의-자유" class="headerlink" title="프로그래머의 자유"></a>프로그래머의 자유</h4><p>프로그래머의 역할을 클래스 작성자와 클라이언트 프로그래머로 구분하는 것이 유용하다.</p>
<ul>
<li>클래스 작성자<br>새로운 데이터 타입을 추가한다. 클래스 작성자는 클라이언트 프로그래머가 필요한 부분만 공개해야 한다. 이처럼 숨견놓은 부분에 접근할 수 없도록 방지하는 것을 <code>구현은닉</code>이라고 부른다.</li>
<li>클라이언트 프로그래머<br>필요한 클래스들을 엮어서 애플리케이션을 빠르고 안정적으로 구축하는 것이다.</li>
</ul>
<p>접근제어 메커니즘을 통해 클래스의 내부와 외부를 명확하게 경계를 지어줌으로써, 클래스 작성자가 내부 구현을 은닉할 수 있게 해준다. 이렇게 하면 클라이언트 프로그래머가 실수로 숨겨진 부분에 접근하는 것을 막아준다.</p>
<p>구현은닉을 통해 클라이언트 프로그래머는 내부의 구현을 무시한 채 인터페이스만 알고 있어도 클래스를 사용할 수 있다. 클래스 작성자는 인터페이스를 바꾸지 않는 한 내부 구현을 마음대로 변경할 수 있다.</p>
<h2 id="협력하는-객체들의-공동체"><a href="#협력하는-객체들의-공동체" class="headerlink" title="협력하는 객체들의 공동체"></a>협력하는 객체들의 공동체</h2><p>Screening 클래스에 영화를 예매하는 기능을 넣어보자.<br>reserve메서드는 영화를 예매한 후 예매 정보를 담고 있는 Reservation의 인스턴스를 생성해서 반환한다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Screenning</span> {</span><br><span class="line">	<span class="comment">// ... 생략</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Reservation <span class="title function_">reserve</span><span class="params">(Customer customer, <span class="type">int</span> audienceCount)</span>{</span><br><span class="line">        <span class="keyword">return</span> Reservation(customer, <span class="built_in">this</span>, calculateFee(audienceCount), audienceCount);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Money <span class="title function_">calculateFee</span><span class="params">(<span class="type">int</span> audienceCount)</span> {</span><br><span class="line">        <span class="keyword">return</span> movie.calculateMovieFee(<span class="built_in">this</span>).times(audienceCount);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>영화를 예매하기 위해 Screening, Movie, Reservation 인스턴스들은 서로의 메서드를 호출하며 상호작용한다. 이처럼 시스템의 어떤 기능을 구현하기 위해 객체들 사이에 이뤄지는 상호작용을 협력이라고 부른다.<br><img lazyload="" src="/images/loading.svg" data-src="/../images/Pasted%20image%2020241017144201.png"></p>
<p>Money는 금액과 관련된 다양한 계산을 구현하는 클래스이다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Money</span> <span class="variable">ZERO</span> <span class="operator">=</span> Money.wons(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Money</span><span class="params">(<span class="type">int</span> amount)</span> {</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Money <span class="title function_">wons</span><span class="params">(<span class="type">int</span> amount)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Money</span>(amount);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">plus</span><span class="params">(Money amount)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Money</span>(<span class="built_in">this</span>.amount + amount.amount);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">minus</span><span class="params">(Money amount)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Money</span>(<span class="built_in">this</span>.amount - amount.amount);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">times</span><span class="params">(<span class="type">double</span> percent)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Money</span>((<span class="type">int</span>) (<span class="built_in">this</span>.amount * (percent / <span class="number">100</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLessThan</span><span class="params">(Money other)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.amount &lt; other.amount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isGreaterThanOrEqual</span><span class="params">(Money other)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.amount &gt;= other.amount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAmount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Money를 단순 Long으로 표현하게 되면 저장하는 값이 금액과 관련돼 있다는 의미를 전달할 수는 없다. 또한 금액과 관련된 로직이 서로 다른 곳에 중복되어 구현되는것을 막을 수 없다.</p>
<h3 id="Long-타입으로-처리할-경우"><a href="#Long-타입으로-처리할-경우" class="headerlink" title="Long 타입으로 처리할 경우"></a>Long 타입으로 처리할 경우</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionA</span> {</span><br><span class="line">	<span class="keyword">public</span> <span class="type">long</span> <span class="title function_">add</span><span class="params">(<span class="type">long</span> amount1, <span class="type">long</span> amount2)</span> {</span><br><span class="line">		<span class="keyword">return</span> amount1 + amount2; <span class="comment">// 중복된 로직</span></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subtract</span><span class="params">(<span class="type">long</span> amount1, <span class="type">long</span> amount2)</span> {</span><br><span class="line">		<span class="keyword">return</span> amount1 - amount2; <span class="comment">// 중복된 로직</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionB</span> {</span><br><span class="line">	<span class="keyword">public</span> <span class="type">long</span> <span class="title function_">add</span><span class="params">(<span class="type">long</span> amount1, <span class="type">long</span> amount2)</span> {</span><br><span class="line">		<span class="keyword">return</span> amount1 + amount2; <span class="comment">// 중복된 로직</span></span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subtract</span><span class="params">(<span class="type">long</span> amount1, <span class="type">long</span> amount2)</span> {</span><br><span class="line">		<span class="keyword">return</span> amount1 - amount2; <span class="comment">// 중복된 로직</span></span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="Money-클래스를-사용하는-경우"><a href="#Money-클래스를-사용하는-경우" class="headerlink" title="Money 클래스를 사용하는 경우"></a>Money 클래스를 사용하는 경우</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionA</span> {</span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">add</span><span class="params">(Money amount1, Money amount2)</span> {</span><br><span class="line">        <span class="keyword">return</span> amount1.plus(amount2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">subtract</span><span class="params">(Money amount1, Money amount2)</span> {</span><br><span class="line">        <span class="keyword">return</span> amount1.minus(amount2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionB</span> {</span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">add</span><span class="params">(Money amount1, Money amount2)</span> {</span><br><span class="line">        <span class="keyword">return</span> amount1.plus(amount2); <span class="comment">// 같은 로직이 아니라 Money 클래스 내에서 처리됨</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">subtract</span><span class="params">(Money amount1, Money amount2)</span> {</span><br><span class="line">        <span class="keyword">return</span> amount1.minus(amount2); <span class="comment">// 같은 로직이 아니라 Money 클래스 내에서 처리됨</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>객체는 다른 객체의 인터페이스에 공개된 행동을 수행하도록 <code>요청</code>할 수 있다.<br>요청을 받은 객체는 자율적인 방법에 따라 요청을 처리한 후 <code>응답</code>한다.</p>
<p>객체끼리 상호작용 할 수 있는 유일한 방법은 <code>메시지</code>를 전송하는 것 뿐이다.<br>수신된 메시지를 처리하기 위한 자신만의 방법을 <code>메서드</code> 라고한다.</p>
<p>메시지와 메서드를 구분하는 것에서 다형성의 개념이 출발한다.</p>
<p>Screening이 Movie의 calculateMovieFee 메서드를 호출한다는 표현보다, calculateMovieFee 메시지를 전송한다는 표현이 더 적절하다.<br>사실 Screening은 Movie 안에 calculateMovieFee 메서드의 존재도 알지 못한다.<br>메시지에 응답할 수 있다고 믿고 메시지를 전송할 뿐이다.</p>
<h3 id="할인-요금-구하기"><a href="#할인-요금-구하기" class="headerlink" title="할인 요금 구하기"></a>할인 요금 구하기</h3><p>Movie 클래스를 구현해보자.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span> {</span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line">	<span class="keyword">private</span> Duration runningTime;</span><br><span class="line">    <span class="keyword">private</span> Money fee;</span><br><span class="line">    <span class="keyword">private</span> DiscountPolicy discountpolicy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String title, Duration runningTime, Money fee, DiscountPolicy discountPolicy)</span>{</span><br><span class="line">	    <span class="built_in">this</span>.title = title;</span><br><span class="line">	    <span class="built_in">this</span>.runningTime = runningTime;</span><br><span class="line">	    <span class="built_in">this</span>.fee = fee;</span><br><span class="line">	    <span class="built_in">this</span>.discountPolicy = discountPolicy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Money <span class="title function_">getFee</span><span class="params">()</span>{</span><br><span class="line">		<span class="keyword">return</span> fee;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">calculateMovieFee</span><span class="params">(Screening screnning)</span> {</span><br><span class="line">        <span class="keyword">return</span> fee.minus(discountPolicy.calculateDiscountAmount(screening));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>이 메서드 안에는 이상한 점이 있다. 어떤 할인 정책을 사용할 것인지 결정하는 코드가 어디에도 존재하지 않는다는 것이다. 단지 discountPolicy에게 메시지를 전송할 뿐이다.</p>
<h4 id="할인-정책"><a href="#할인-정책" class="headerlink" title="할인 정책"></a>할인 정책</h4><p>할인 정책은 금액 할인 정책과 비율 할인 정책으로 구분된다. 두 가지 할인 정책을 각각 AmountDiscountPolicy와 PercentDiscountPolicy라는 클래스로 구현할 것이다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DiscountPolicy</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;DiscountCondition&gt; conditions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscountPolicy</span><span class="params">(DiscountCondition ... conditions)</span> {</span><br><span class="line">        <span class="built_in">this</span>.conditions = Arrays.asList(conditions);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monet <span class="title function_">calculateDiscountAmount</span><span class="params">(Screening screening)</span> {</span><br><span class="line">        <span class="keyword">for</span>(DiscountCondition each : conditions) {</span><br><span class="line">            <span class="keyword">if</span> (each.isSatisfiedBy(screening)) {</span><br><span class="line">                <span class="keyword">return</span> getDiscountAmount(screening);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Money.ZERO;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> Money <span class="title function_">getDiscountAmount</span><span class="params">(Screeing screening)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AmountDiscountPolicy</span> <span class="keyword">extends</span> <span class="title class_">DiscountPolicy</span> {</span><br><span class="line">    <span class="keyword">private</span> Money discountAmount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AmountDiscountPolicy</span><span class="params">(Money discountAmount, DiscountCondition[] conditions)</span> {</span><br><span class="line">        <span class="built_in">super</span>(conditions);</span><br><span class="line">        <span class="built_in">this</span>.discountAmount = discountAmount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Money <span class="title function_">getDiscountAmount</span><span class="params">(Screening screening)</span> {</span><br><span class="line">        <span class="keyword">return</span> discountAmount;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PercentDiscountPolicy</span> <span class="keyword">extends</span> <span class="title class_">DiscountPolicy</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> percent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PercentDiscountPolicy</span><span class="params">(<span class="type">double</span> percent, DiscountCondition[] conditions)</span> {</span><br><span class="line">        <span class="built_in">super</span>(conditions);</span><br><span class="line">        <span class="built_in">this</span>.percent = percent;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Money <span class="title function_">getDiscountAmount</span><span class="params">(Screening screening)</span> {</span><br><span class="line">        <span class="keyword">return</span> screening.getMovieFee().times(percent);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>여기서는 부모클래스인 DiscountPolicy안에 중복 코드를 두고 두 클래스가 이 클래스를 상속받게 할 것이다.<br>할인 여부와 요금 계산에 필요한 전체적인 흐름은 정의하지만, 실제로 요금을 계산하는 부분은 추상 메서드에게 위임한다. 실제로는 DiscountPolicy를 상속받은 자식 클래스에서 오버라이딩한 메서드가 실행될 것이다.<br>이처럼 부모클래스에 기본적인 흐름을 구현하고, 중간에 필요한 처리를 자식 클래스에게 위임하는 디자인 패턴을 <code>TEMPLATE METHOD</code>패턴이라고 한다.</p>
<h4 id="할인-조건"><a href="#할인-조건" class="headerlink" title="할인 조건"></a>할인 조건</h4><p>할인 조건에는 순번 조건과 기간 조건의 두 가지 할인 조건이 존재한다. 두 가지 할인 조건은 각각 SequeneceCondition과 PeriodCondition이라는 클래스로 구현될 것이다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DiscountCondition</span> {</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSatisfiedBy</span><span class="params">(Screening screening)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SequenceCondition</span> <span class="keyword">implements</span> <span class="title class_">DiscountCondition</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sequence; <span class="comment">// 할인 여부를 판단하기 위해 사용할 순번</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SequenceCondition</span><span class="params">(<span class="type">int</span> sequence)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sequence = sequence;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSatisfiedBy</span><span class="params">(Screening screening)</span> {</span><br><span class="line">        <span class="keyword">return</span> screening.isSequence(<span class="built_in">this</span>.sequence); <span class="comment">// 상영 순번과 일치할 경우 true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeriodCondition</span> <span class="keyword">implements</span> <span class="title class_">DiscountCondition</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> dayOfWeek; <span class="comment">// 요일</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startTime; <span class="comment">// 시작 시간</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endTime; <span class="comment">// 종료 시간</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PeriodCondition</span><span class="params">(<span class="type">int</span> dayOfWeek, <span class="type">int</span> startTime, <span class="type">int</span> endTime)</span> {</span><br><span class="line">        <span class="built_in">this</span>.dayOfWeek = dayOfWeek;</span><br><span class="line">        <span class="built_in">this</span>.startTime = startTime;</span><br><span class="line">        <span class="built_in">this</span>.endTime = endTime;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSatisfiedBy</span><span class="params">(Screening screening)</span> {</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// 상영 요일이 같고 시작 시간이 startTime과 endTime 사이에 있을 경우 true</span></span><br><span class="line">            screening.getStartTime() == <span class="built_in">this</span>.dayOfWeek &amp;&amp;</span><br><span class="line">            <span class="built_in">this</span>.startTime &lt;= screening.getStartTime() &amp;&amp;</span><br><span class="line">            <span class="built_in">this</span>.endTime &gt;= screening.getStartTime()</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="상속과-다형성"><a href="#상속과-다형성" class="headerlink" title="상속과 다형성"></a>상속과 다형성</h2><p>다시 한번 Movie 클래스를 살펴보자.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span> {</span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line">	<span class="keyword">private</span> Duration runningTime;</span><br><span class="line">    <span class="keyword">private</span> Money fee;</span><br><span class="line">    <span class="keyword">private</span> DiscountPolicy discountpolicy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String title, Duration runningTime, Money fee, DiscountPolicy discountPolicy)</span>{</span><br><span class="line">	    <span class="built_in">this</span>.title = title;</span><br><span class="line">	    <span class="built_in">this</span>.runningTime = runningTime;</span><br><span class="line">	    <span class="built_in">this</span>.fee = fee;</span><br><span class="line">	    <span class="built_in">this</span>.discountPolicy = discountPolicy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Money <span class="title function_">getFee</span><span class="params">()</span>{</span><br><span class="line">		<span class="keyword">return</span> fee;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">calculateMovieFee</span><span class="params">(Screening screnning)</span> {</span><br><span class="line">        <span class="keyword">return</span> fee.minus(discountPolicy.calculateDiscountAmount(screening));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>영화의 할인 정책을 금액과 비율 중에 어떤걸로 할건지 결정하려면 둘 중에 하나에 연결돼있어야 한다. 즉 Movie클래스는 AmountDiscountPolicy클래스나, PercentDiscountPolicy 중 하나에 의존해야한다. 그러나 caculateMovieFee 메서드를 살펴보면 두 자식 클래스 대신 부모클래스에 의존하는 것을 볼 수 있다.</p>
<p>그렇다면 어떻게 할인 정책을 결정할 수 있을까?<br>바로 Movie의 인스턴스를 생성할때 생성자의 인자로 자식클래스를 전달하면 된다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Movie</span>(<span class="string">"해리포터"</span>, Duration.ofMinutes(<span class="number">120</span>), Money.wons(<span class="number">10000</span>), <span class="keyword">new</span> <span class="title class_">AmountDiscountPolicy</span>(Money.wons(<span class="number">800</span>), ...));</span><br></pre></td></tr></table></figure></div>

<p>이 코드에서 생성된 Movie 인스턴스는 결국 AmountDiscountPolicy 클래스 인스턴스에 의존하게 될 것이다.<br>결국에 Movie클래스의 할인 정책은 실행 시점에 인스턴스가 생성되며 결정된다.</p>
<p>여기서 핵심은 코드의 의존성과 실행시점의 의존성이 서로 다를 수 있다는 점이다.<br>(= 클래스 사이의 의존성과 객체 사이의 의존성은 동일하지 않을 수 있다.)<br>코드의 의존성과 실행 시점의 의존성이 다를 수록 코드를 이해하고 디버깅하기는 어려워진다.<br>반대로 유연하지 않을 수록 코드를 이해하고 디버깅하기는 쉬워지지만, 재사용성과 확장 가능성은 낮아진다.<br>따라서 코드의 의존성과 실행시점의 의존성이 다를 수록 설계가 유연해진다.<br>이와 같은 특징은 객체지향 설계가 트레이드 오프의 산물이라는 사실을 잘 보여준다.</p>
<p>훌륭한 객체지향 설계자로 성장하기 위해서는 항상 유연성과 가독성 사이에서 고민해야한다.</p>
<h2 id="상속과-인터페이스"><a href="#상속과-인터페이스" class="headerlink" title="상속과 인터페이스"></a>상속과 인터페이스</h2><p>인터페이스는 객체가 이해할 수 있는 메시지의 목록을 정의한다는 것을 기억하자.<br>상속을 통해 자식은 부모 클래스가 수신할 수 있는 모든 메시지를 수신할 수 있기 때문에 외부 객체는 자식 클래스를 부모 클래스와 동일한 타입으로 간주할 수 있다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span>{</span><br><span class="line">	<span class="keyword">public</span> Money <span class="title function_">caculateMovieFee</span><span class="params">(Screening screening)</span>{</span><br><span class="line">		<span class="keyword">return</span> fee.minus(discountPolicy.calculateDiscountAmount(screening));</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>Movie는 DiscountPolicy의 인터페이스에 정의된 calculateDiscountAmount라는 메시지를 전송하고 있다. DiscountPolicy를 상속받은 AmountDiscountPolicy, PercentDiscountPolicy의 인터페이스에도 이 메서드가 포함되어 있다.</p>
<p>Movie입장에서는 자신과 협력하는 객체가 어떤 클래스의 인스턴스인지가 중요한 것이 아니라, calculateDiscountAmount라는 메시지를 수신할 수 있다는 사실이 중요하다.</p>
<h2 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h2><p>메시지와 메서드는 다른 개념이다.<br>Movie는 discountPolicy의 인스턴스에게 calculateDiscountPolicy 메시지를 전송한다.<br>그럼 실행되는 메서드는 무엇인가? 이는 연결된 객체의 클래스가 무엇인지에 따라 달라진다.</p>
<p>다시 말해, Movie는 동일한 메시지를 전송하지만 실제로 어떤 메서드가 실행될 것 인가?는 메시지를 수신하는 객체의 클래스가 무엇이냐에 따라 달라진다. 이를 다형성이라 부른다.</p>
<p>이처럼 메시지와 메서드를 실행 시점에 바인딩 하는것을 지연바인딩 혹은 동적 바인딩이라고 부른다.</p>
<h2 id="추상화와-유연성"><a href="#추상화와-유연성" class="headerlink" title="추상화와 유연성"></a>추상화와 유연성</h2><h3 id="추상화의-힘"><a href="#추상화의-힘" class="headerlink" title="추상화의 힘"></a>추상화의 힘</h3><p>DiscountPolicy는 AmountDiscountPolicy, PercentDiscountPolicy 보다 더 추상적이고,<br>DiscountCondition은 SequenceCondition, PeriodCondition보다 더 추상적이다.<br><img lazyload="" src="/images/loading.svg" data-src="/../images/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202024-10-17%20%EC%98%A4%ED%9B%84%207.35.06.png"><br>이는 인터페이스에 초점을 맞추기 때문이다.<br>DiscountPolicy는 모든 할인 정책이 수신할 수 있는 calculateDiscountAmount메시지를 정의한다.<br>DiscountCondition은 모든 할인 조건들이 수신할 수 있는 isSatisfiedBy 메시지를 정의한다.</p>
<p>이처럼 추상화를 사용할 경우 2가지의 장점이 있다.</p>
<ol>
<li>추상화의 계층만 따로 떼어 놓고 보면 요구사항의 정책을 높은 수준에서 서술할 수 있다.</li>
<li>추상화를 이용하면 설계가 좀 더 유연해진다. 구체적인 상황에 결합되지 않기 때문이다.</li>
</ol>
<p>위 다이어그램을 하나의 문장으로 정리하면,<br>“영화 에매 요금은 최대 하나의 할인 정책과 다수의 할인 조건을 이용해 계산할 수 있다.”와 같다.<br>위 문장은 “금액 할인 정책과 다수의 할인 조건을 이용해 계산할 수 있다.”와 같다.<br>위 문장은 “금액 할인 정책과 두 개의 순서 조건, 한 개의 기간 조건을 이용해 계산할 수 있다”라는 문장을 포괄할 수 있다는 사실이 중요하다.</p>
<p>추상화를 통해 상위 정책을 기술한다는 것은 기본적인 애플리케이션의 협력 흐름을 기술하다는 것을 의미한다.<br>영화 예매 가격을 계산하기 위한 흐름은 항상 Movie -&gt; DiscountPolicy -&gt; DiscountCondition 순서로 흘러간다.<br>할인 정책, 조건의 자식들은 추상화를 이용해서 흐름에 그대로 따르게 된다.</p>
<p>추상화가 유연한 설계를 가능하게 하는 이유는 설계가 구체적인 상황에 결합되는 것을 방지하기 때문이다.<br>Movie는 특정한 할인 정책에 묶이지 않는다. 할인 정책을 구현한 클래스가 DiscountPolicy를 상속받고 있다면 어떤 클래스와도 협력이 가능하다.<br>DiscountPolicy 역시 특정 할인 조건에 묶여있지 않다. DiscountCondition을 상속받은 어떤 클래스와도 협력이 가능하다.</p>
<p>이 모든 것이 추상화 덕분이다.</p>
<h3 id="유연한-설계"><a href="#유연한-설계" class="headerlink" title="유연한 설계"></a>유연한 설계</h3><p>할인 정책이 적용돼 있지 않은 영화의 경우, 예외 케이스로 취급되기 때문에 일관성 있던 협력 방식이 무너지게 된다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span>{</span><br><span class="line">	<span class="keyword">public</span> Money <span class="title function_">calculateMovieFee</span><span class="params">(Screening screnning)</span> {</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">this</span>.discountPolicy == <span class="literal">null</span>){</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">this</span>.fee;</span><br><span class="line">		}</span><br><span class="line">        <span class="keyword">return</span> fee.minus(discountPolicy.calculateDiscountAmount(screening));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>할인 정책이 있는 경우에는, 할인 금액을 계산하는 책임이 discountPolicy의 자식 클래스에 있지만<br>할인 정책이 없는 경우, 할인 금액을 0원으로 결정하는 책임이 Moive에 있게 된다.<br>하지만 책임의 위치를 결정하기 위해 조건문을 사용하는 것은 협력의 설계 측면에서 좋지 않다.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DiscountPolicy</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;DiscountCondition&gt; conditions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscountPolicy</span><span class="params">(DiscountCondition ... conditions)</span> {</span><br><span class="line">        <span class="built_in">this</span>.conditions = Arrays.asList(conditions);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Money <span class="title function_">calculateDiscountAmount</span><span class="params">(Screening screening)</span> {</span><br><span class="line">        <span class="keyword">for</span>(DiscountCondition each : conditions) {</span><br><span class="line">            <span class="keyword">if</span> (each.isSatisfiedBy(screening)) {</span><br><span class="line">                <span class="keyword">return</span> getDiscountAmount(screening);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Money.ZERO;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> Money <span class="title function_">getDiscountAmount</span><span class="params">(Screeing screening)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>조건문을 사용하지 않기 위해(책임 있는 객체를 만들기 위해) NoneDiscountPolicy 클래스를 추가해보자.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoneDiscountPolicy</span> <span class="keyword">extends</span> <span class="title class_">DiscountPolicy</span>{</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Money <span class="title function_">getDiscountAmount</span><span class="params">(Screening screening)</span>{</span><br><span class="line">		<span class="keyword">return</span> Money.ZERO;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>위 코드를 보면, NoneDiscountPolicy는 getDiscountAmount()를 오버라이딩하여 ZERO를 반환하도록 하고있다. 하지만 할인 조건이 없는 경우, calculateDiscountAmount 메시지 호출시 getDiscountAmount()자체를 호출하지 않는다.</p>
<p>부모 클래스인 DiscountPolicy는 할인 조건이 없는 경우 getDiscountAmount()를 호출하지 않고, ZERO를 반환한다. 이는 DiscountPolicy내부에 NoneDiscountPolicy를 개념적으로 결합시켜둔 것이다. 개발자는 DiscountCondition이 없으면 0원을 반환할 것이라는 사실을 가정하기 때문이다.</p>
<p>이러한 문제를 해결하기 위해 DiscountPolicy를 인터페이스로 바꾸고, 기존의 DiscountPolicy를 DefaultDiscountPolicy라는 abstract class로 만든다.<br><img lazyload="" src="/images/loading.svg" data-src="/../images/Pasted%20image%2020241017173838.png"></p>
<p>과연 어떤 설계가 더 좋은가? 구현과 관련된 모든 것들이 트레이드 오프의 대상이 될 수 있다.<br>우리가 작성하는 코드는 모두 합당한 이유가 있어야 한다. 비록 아주 사소하더라도 트레이드오프를 통해 얻어진 결론은 그렇지 않은 경우와 매우 다르다.</p>
<h2 id="코드-재사용"><a href="#코드-재사용" class="headerlink" title="코드 재사용"></a>코드 재사용</h2><p>상속은 코드를 재사용하기 위해 널리 사용되는 방법이다.<br>그러나 코드 재사용을 위해서는 상속보다는 합성이 더 좋은 방법이다.<br>합성이란 다른 객체의 인스턴스를 자신의 인스턴스 변수로 포함해서 재사용하는 방법을 말한다.</p>
<p>다음은 합성방식을 상속으로 변경한 다이어그램이다.<br><img lazyload="" src="/images/loading.svg" data-src="/../images/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202024-10-17%20%EC%98%A4%ED%9B%84%207.42.34.png"></p>
<p>상속의 방식은 두 가지 단점을 가져온다.</p>
<ol>
<li>캡슐화 위반<br>부모 클래스의 구현이 자식 클래스에게 노출되기 때문에 캡슐화가 약화된다.</li>
<li>유연하지 못한 설계<br>상속은 부모 클래스와 자식 클래스 사이의 관계를 컴파일 시점에 결정한다.<br>따라서 실행 시점에 객체의 종류를 변경하는 것은 불가능하다.</li>
</ol>
<p>반대로 합성의 방식은</p>
<ul>
<li>Movie가 DiscountPolicy의 코드를 재사용하고</li>
<li>DiscountPolicy의 인터페이스를 통해 약하게 결합된다.</li>
</ul>
<p>합성은 상속이 가지는 두 가지 문제점을 모두 해결한다.<br>또한 합성은 인터페이스에 정의된 메시지를 통해서만 재사용이 가능하기 때문에 캡슐화가 가능하며, 의존하는 인스턴스가 쉽게 교체 될 수 있기 때문에 설계가 유연해진다.</p>
<p>그렇다고 상속을 무조건 사용하지 말라는 것은 아니다. 상속과 합성을 적절히 섞어서 사용할 수 있어야 한다. 위 예제에서는 Movie와 DiscountPolicy가 합성관계이지만 AmountDiscountPolicy와 PercentDiscountPolicy는 상속관계로 되어있다.</p>
]]></content>
      <categories>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>OOP</tag>
        <tag>Object</tag>
      </tags>
  </entry>
</search>
